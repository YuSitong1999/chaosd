{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/attack/clock": {
            "post": {
                "description": "Create clock attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create clock attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.ClockOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/disk": {
            "post": {
                "description": "Create disk attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create disk attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.DiskOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/http": {
            "post": {
                "description": "Create http attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create http attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.HTTPAttackOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/jvm": {
            "post": {
                "description": "Create JVM attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create JVM attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.JVMCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/kafka": {
            "post": {
                "description": "Create Kafka attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create Kafka attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.KafkaCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/network": {
            "post": {
                "description": "Create network attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create network attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.NetworkCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/process": {
            "post": {
                "description": "Create process attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create process attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.ProcessCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/redis": {
            "post": {
                "description": "Create redis attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create redis attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.RedisCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/stress": {
            "post": {
                "description": "Create stress attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create stress attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.StressCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/user_defined": {
            "post": {
                "description": "Create user defined attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create user defined attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.RedisCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/vm": {
            "post": {
                "description": "Create VM attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create VM attack.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.VMOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/api/attack/{uid}": {
            "delete": {
                "description": "Create recover attack.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attack"
                ],
                "summary": "Create recover attack.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "core.ClockFuncStore": {
            "type": "object",
            "properties": {
                "codeOfGetClockFunc": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "originAddress": {
                    "type": "integer"
                }
            }
        },
        "core.ClockOption": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "clock-ids-slice": {
                    "type": "string"
                },
                "clockIdsMask": {
                    "type": "integer"
                },
                "duration": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "nsecDelta": {
                    "type": "integer"
                },
                "pid": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string"
                },
                "secDelta": {
                    "type": "integer"
                },
                "store": {
                    "$ref": "#/definitions/core.ClockFuncStore"
                },
                "time-offset": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.DiskOption": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "fallocate": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "payload-process-num": {
                    "type": "integer"
                },
                "percent": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.HTTPAttackOption": {
            "type": "object",
            "properties": {
                "abort": {
                    "type": "boolean"
                },
                "action": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "delay": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "enable-conn-pool": {
                    "type": "boolean"
                },
                "file_path": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "proxy_ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "schedule": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "url": {
                    "description": "used for HTTP request, now only support GET",
                    "type": "string"
                }
            }
        },
        "core.JVMCommand": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "fault action, values can be latency, exception, return, stress, gc, rule-file, rule-data, mysql",
                    "type": "string"
                },
                "class": {
                    "description": "Java class",
                    "type": "string"
                },
                "cpu-count": {
                    "description": "the CPU core number need to use, only set it when action is stress",
                    "type": "integer"
                },
                "database": {
                    "description": "the match database\ndefault value is \"\", means match all database",
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "exception": {
                    "description": "the exception which needs to throw for action `exception`\nor the exception message needs to throw in action `mysql`",
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "latency": {
                    "description": "the latency duration for action 'latency'\nor the latency duration in action `mysql`",
                    "type": "integer"
                },
                "mem-type": {
                    "description": "the memory type need to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
                    "type": "string"
                },
                "method": {
                    "description": "the method in Java class",
                    "type": "string"
                },
                "mysql-connector-version": {
                    "description": "the version of mysql-connector-java, only support 5.X.X(set to 5) and 8.X.X(set to 8) now",
                    "type": "string"
                },
                "name": {
                    "description": "rule name, should be unique, and will generate by chaosd automatically",
                    "type": "string"
                },
                "pid": {
                    "description": "the pid of Java process which need to attach",
                    "type": "integer"
                },
                "port": {
                    "description": "the port of agent server",
                    "type": "integer"
                },
                "rule-data": {
                    "description": "RuleData used to save the rule file's data, will use it when recover, for action 'rule-data'",
                    "type": "string"
                },
                "rule-file": {
                    "description": "btm rule file path for action 'rule-file'",
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "sql-type": {
                    "description": "the match sql type\ndefault value is \"\", means match all SQL type",
                    "type": "string"
                },
                "table": {
                    "description": "the match table\ndefault value is \"\", means match all table",
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "value": {
                    "description": "the return value for action 'return'",
                    "type": "string"
                }
            }
        },
        "core.KafkaCommand": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "global options",
                    "type": "string"
                },
                "authMechanism": {
                    "type": "string"
                },
                "configFile": {
                    "description": "options for fill and io attack",
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "host": {
                    "description": "options for fill and flood attack",
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "maxBytes": {
                    "type": "integer"
                },
                "messageSize": {
                    "type": "integer"
                },
                "nonReadable": {
                    "description": "options for io attack",
                    "type": "boolean"
                },
                "nonWritable": {
                    "type": "boolean"
                },
                "originConfig": {
                    "type": "string"
                },
                "originModeOfFiles": {
                    "description": "recover data for io attack",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "reloadCommand": {
                    "description": "options for fill attack",
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "threads": {
                    "description": "options for flood attack",
                    "type": "integer"
                },
                "topic": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "core.NetworkCommand": {
            "type": "object",
            "properties": {
                "accept-tcp-flags": {
                    "description": "only the packet which match the tcp flag can be accepted, others will be dropped.\nonly set when the IPProtocol is tcp, used for partition.",
                    "type": "string"
                },
                "action": {
                    "type": "string"
                },
                "buffer": {
                    "description": "Buffer is the maximum amount of bytes that tokens can be available for instantaneously.",
                    "type": "integer"
                },
                "correlation": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "dns-domain-name": {
                    "type": "string"
                },
                "dns-ip": {
                    "type": "string"
                },
                "dns-server": {
                    "description": "used for DNS attack",
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "egress-port": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ip-address": {
                    "type": "string"
                },
                "ip-protocol": {
                    "type": "string"
                },
                "iperf-pid": {
                    "description": "used for flood\nthe pid of iperf",
                    "type": "integer"
                },
                "jitter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "latency": {
                    "type": "string"
                },
                "limit": {
                    "description": "Limit is the number of bytes that can be queued waiting for tokens to become available.",
                    "type": "integer"
                },
                "minburst": {
                    "description": "Minburst specifies the size of the peakrate bucket. For perfect\naccuracy, should be set to the MTU of the interface.  If a\npeakrate is needed, but some burstiness is acceptable, this\nsize can be raised. A 3000 byte minburst allows around 3mbit/s\nof peakrate, given 1000 byte packets.",
                    "type": "integer"
                },
                "parallel": {
                    "description": "used for flood\nnumber of iperf parallel client threads to run",
                    "type": "integer"
                },
                "peakrate": {
                    "description": "Peakrate is the maximum depletion rate of the bucket.\nThe peakrate does not need to be set, it is only necessary\nif perfect millisecond timescale shaping is required.",
                    "type": "integer"
                },
                "percent": {
                    "type": "string"
                },
                "port": {
                    "description": "used for port occupied or flood",
                    "type": "string"
                },
                "port-pid": {
                    "type": "integer"
                },
                "rate": {
                    "description": "Rate is the speed knob. Allows bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.",
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "source-port": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.ProcessCommand": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "pids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "process": {
                    "description": "Process defines the process name or the process ID.",
                    "type": "string"
                },
                "recoverCmd": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "signal": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.RedisCommand": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "addr": {
                    "type": "string"
                },
                "cacheSize": {
                    "type": "string"
                },
                "conf": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "expiration": {
                    "type": "string"
                },
                "flushConfig": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "option": {
                    "type": "string"
                },
                "originCacheSize": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "percent": {
                    "type": "string"
                },
                "redisPath": {
                    "type": "string"
                },
                "requestNum": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.StressCommand": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "load": {
                    "type": "integer"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedule": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "stress-ng-pid": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                },
                "workers": {
                    "type": "integer"
                }
            }
        },
        "core.VMOption": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "vm-name": {
                    "type": "string"
                }
            }
        },
        "utils.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "error": {
                    "type": "boolean"
                },
                "full_text": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        }
    }
}